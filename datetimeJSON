For datetime JSON encoding/ decoding: 
https://gist.github.com/abhinav-upadhyay/5300137
from json import JSONEncoder, JSONDecoder
from datetime import datetime

# FROM https://gist.github.com/abhinav-upadhyay/5300137 THANK YOU
class DateTimeEncoder(JSONEncoder):
    """ Instead of letting the default encoder convert datetime to string,
        convert datetime objects into a dict, which can be decoded by the
        DateTimeDecoder
    """
    def default(self, obj):
        if isinstance(obj, datetime):
            return {
                '__type__': 'datetime',
                'year': obj.year,
                'month': obj.month,
                'day': obj.day,
                'hour': obj.hour,
                'minute': obj.minute,
                'second': obj.second,
                'microsecond': obj.microsecond,
            }
        else:
            return JSONEncoder.default(self, obj)

class DateTimeDecoder(JSONDecoder):

    def __init__(self, *args, **kargs):
        JSONDecoder.__init__(self, object_hook=self.dict_to_object,
                             *args, **kargs)

    def dict_to_object(self, d):
        if '__type__' not in d:
            return d

        if isinstance(d, dict):
            type = d.pop('__type__', None)
            try:
                dateobj = datetime(**d)
                return dateobj
            except:
                d['__type__'] = type
                return d
